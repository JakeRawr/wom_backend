get('/test') - outputs list of all users (For testing purposes), no arguments

post('/api/users') - Creates a new user and adds to the collection if their email and username are not taken. Takes a name, email, password, passwordConfirm, and returns a jwt token if successful, else returns a 500 server error with specified error message.

get('rest/test/list') - outputs list of all restaurants, no arguments. 

[
	{
		"name": "Testaurant",
		"_id": "546bb3bad9044f7a780a5148",
		"__v": 0,
		"commentsCollection": [ ]
	},
	{
		"name": "McDonalds",
		"_id": "546bcdab3c450402008e15d7",
		"__v": 0,
		"commentsCollection": [ ]
	}
]



get('rest/comments/_name_) - outputs list of comments of specified restaurant, takes '_name_' variable as part of url.


post('/rest/addRest) - posts new restaurant to the collection given a name. If that restaurant is already included, then outputs that restaurant object (like the one shown in the test/list example) outputs error if there is a server error


post('/comment/add') - must be logged in for use. requires header parameter of jwt:(token string). post body consists of rating, category, restaurant, and str (str = string body of comment). sends "comment added" if successful, error if not. The restaurant name will be reformated to be all lower cased, with spaces replaced with "-". All characters other than numbers and strings will be stripped away.If the restaurant is already in the database, then it will append the comment to its commentsCollection. Else, it will Create a new Restaurant and also append the comment 

get('/comment/list') - must be logged in for use. requires header parameters of jwt:(token string).outputs all comments contained in user object in an json form with the comments in an array.{'list' : array}

get('/cat/list') - lists all categories that have been added.




